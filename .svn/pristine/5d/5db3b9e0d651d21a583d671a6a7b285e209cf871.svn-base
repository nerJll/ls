package com.aixu.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.aixu.bean.AixuBaseLawsuit;
import com.aixu.dao.AixuBaseLawsuitMapper;
import com.aixu.util.DateUtil;

/**
 * @desc 基本信息
 * @date 2017年12月18日
 */
@Service
public class CCBaseInfoService {
	private static int LawsuitNo_GD = 0; // 广东客诉单编号
	private static int LawsuitNo_ZJ = 0; // 浙江客诉单编号
	private static String DateString = DateUtil.getDateFormat(new Date()); // 上一个日期字符串
	private final static Logger logger = LoggerFactory.getLogger(CCBaseInfoService.class);
	@Autowired
	private AixuBaseLawsuitMapper BaseInfoDao;

	/**
	 * @desc 存储文件
	 * @param file
	 * @return 文件名+地址
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	public String SaveFile(MultipartFile file, String fileName) throws IllegalStateException, IOException {
		
		ClassLoader classLoader = CCBaseInfoService.class.getClassLoader();
        URL resource = classLoader.getResource("application.properties");
        String path= resource.getPath();
         
        File filepath1 = new File(path);
        String filepath2 = filepath1.getParent() + "\\static\\files\\" + DateUtil.getDateFormat(new Date()) + "\\";
        File filepath = new File(filepath2);
		if (!filepath.exists()) {
			filepath.mkdirs();// 如果目录不存在，创建目录
		}
		// 通过CommonsMultipartFile的方法直接写文件（注意这个时候）
		file.transferTo(new File(filepath + File.separator + fileName));
		return DateUtil.getDateFormat(new Date()) + "\\" + fileName;
	}

	/**
	 * @desc 删除文件
	 * @param file
	 */
	public boolean deleteFile(MultipartFile file) {
		String filePath = "E:\\spring-cloud\\common\\" + DateUtil.getDateFormat(new Date()) + "\\"
				+ file.getOriginalFilename();
		File deleteFile = new File(filePath);
		if (deleteFile.isFile() && deleteFile.exists()) {
			deleteFile.delete();
			return true;
		}
		return false;
	}

	/**
	 * @desc 存储基本信息
	 * @param aixuBaseLawsuit
	 * @param infoId
	 * @return
	 */
	public boolean saveCcBaseInfo(AixuBaseLawsuit aixuBaseLawsuit, String infoId) {
		if ("".equals(aixuBaseLawsuit.getLawsuitNo())) {
			return false;
		}
		try {
			if (!"".equals(aixuBaseLawsuit.getFileSrc())) {
				String fileSrc = aixuBaseLawsuit.getFileSrc().substring(0, aixuBaseLawsuit.getFileSrc().length() - 1); // 去除文件地址最后一个逗号
				aixuBaseLawsuit.setFileSrc(fileSrc);
			}
			aixuBaseLawsuit.setLawsuitDanState("阶段1-OA审批中"); // 客诉状态
			aixuBaseLawsuit.setCreateTime(new Date()); // 创建时间
			aixuBaseLawsuit.setId(infoId); // id
			BaseInfoDao.insert(aixuBaseLawsuit);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("<--存储基本信息出错-->");
			return false;
		}
	}

	/**
	 * @desc 通过id取客诉基本信息
	 * @param id
	 * @return
	 */
	public AixuBaseLawsuit getBaseInfoById(String id) {
		return BaseInfoDao.selectByPrimaryKey(id);
	}

	/**
	 * @desc 根据责任工厂获取客诉单编号
	 * @param zrgc
	 * @return 例：G20180101001A
	 */
	public synchronized String getLawsuitNo(String zrgc) {

		if (!DateString.equals(DateUtil.getDateFormat(new Date()))) { // 如果跨天就置0
			LawsuitNo_GD = 0;
			LawsuitNo_ZJ = 0;
			DateString = DateUtil.getDateFormat(new Date());
		}

		StringBuffer sb = new StringBuffer();
		if (zrgc.indexOf("广东") >= 0) { // G / Z
			sb.append("G");
			sb.append(DateUtil.getDateFormat(new Date(), "yyyyMMdd")); // 20180101
			LawsuitNo_GD++;
			if (LawsuitNo_GD < 10) { // 001
				sb.append("00" + LawsuitNo_GD);
			} else if (LawsuitNo_GD < 100 && LawsuitNo_GD >= 10) {
				sb.append("0" + LawsuitNo_GD);
			} else {
				sb.append(LawsuitNo_GD);
			}
		} else if (zrgc.indexOf("浙江") >= 0) {
			sb.append("Z");
			sb.append(DateUtil.getDateFormat(new Date(), "yyyyMMdd")); // 20180101
			LawsuitNo_ZJ++;
			if (LawsuitNo_ZJ < 10) { // 001
				sb.append("00" + LawsuitNo_ZJ);
			} else if (LawsuitNo_ZJ < 100 && LawsuitNo_ZJ >= 10) {
				sb.append("0" + LawsuitNo_ZJ);
			} else {
				sb.append(LawsuitNo_ZJ);
			}
		}
		sb.append("A"); // A
		return sb.toString();
	}

	/**
	 * @desc 触发OA第2次审批，并修改客诉状态
	 * @param aixuBaseLawsuit
	 * @return
	 */
	public boolean saveAndSendOA1(AixuBaseLawsuit aixuBaseLawsuit) {
		try {
			BaseInfoDao.updateByPrimaryKeySelective(aixuBaseLawsuit);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * @desc  阶段1-更新是否立案
	 * @param lawsuitID
	 * @param checkLA
	 * @return
	 */
	public boolean updateOA1checkLA(String lawsuitId, String checkLA) {
		try {
			AixuBaseLawsuit baseInfo = BaseInfoDao.selectByPrimaryKey(lawsuitId);
			baseInfo.setResTen(checkLA);
			BaseInfoDao.updateByPrimaryKeySelective(baseInfo);
			return true;
		}catch(Exception e) {
			e.printStackTrace();
			logger.info("<--更新责任认定状态失败-->");
			return false;
		}
	}

	/**
	 * @desc  更新状态
	 * @param lawsuitId
	 * @param state
	 * @return
	 */
	public boolean updataState(String lawsuitId, String state) {
		try {
			AixuBaseLawsuit aixuBaseLawsuit =getBaseInfoById(lawsuitId);
			aixuBaseLawsuit.setLawsuitDanState(state);
			return true;
		}catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}
}
